(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9174],{53735:function(t,e,o){"use strict";o.r(e),o.d(e,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return h}});var n=o(87462),i=o(63366),r=(o(67294),o(3905)),a=o(93456),s=["components"],c={id:"bootstrap",title:"Bootstrap"},l=void 0,d={unversionedId:"build/core/bootstrap",id:"build/core/bootstrap",title:"Bootstrap",description:"When the Archethic node, a task is launched to  perform the node bootstrapping to join the network.",source:"@site/docs/build/core/bootstrap.md",sourceDirName:"build/core",slug:"/build/core/bootstrap",permalink:"/archethic-docs/build/core/bootstrap",tags:[],version:"current",lastUpdatedAt:1653839248,formattedLastUpdatedAt:"5/29/2022",frontMatter:{id:"bootstrap",title:"Bootstrap"},sidebar:"docs",previous:{title:"Account",permalink:"/archethic-docs/build/core/account"},next:{title:"Election",permalink:"/archethic-docs/build/core/election"}},p=[{value:"Network initizialiation",id:"network-initizialiation",children:[],level:2},{value:"First node bootstrapping",id:"first-node-bootstrapping",children:[],level:2},{value:"Next time bootstraps",id:"next-time-bootstraps",children:[],level:2}],u={toc:p};function h(t){var e=t.components,o=(0,i.Z)(t,s);return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When the Archethic node, a task is launched to  perform the node bootstrapping to join the network."),(0,r.kt)("p",null,"To be able to bootstrap a node, we gather connectivity information (IP, Port, Transport, Reward address, Bootstrapping seeds) and also last synchronization date."),(0,r.kt)("p",null,"But a flow is determine to define what is the state of the bootstrap: network initialization, first bootstrap, next bootstrap"),(0,r.kt)(a.Mermaid,{config:{},chart:"graph TD\n    A[Start] --\x3e B{Need to bootstrap ?}\n    B --\x3e|Yes| Bootstrap   \n    B --\x3e|No| End\n    Bootstrap --\x3e C{Need to initialize network?}\n    C --\x3e|Yes| D(Initialize network)\n    C --\x3e|No| E{New node public key ?}\n    E --\x3e|Yes| F(New node transaction update)\n    E --\x3e|Yes| G(First node transaction)",mdxType:"Mermaid"}),(0,r.kt)("h2",{id:"network-initizialiation"},"Network initizialiation"),(0,r.kt)("p",null,"The first node joining the network will be in charge to initialize the network by defining few transaction chains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create first node shared secrets transaction chain with initial dailly nonce"),(0,r.kt)("li",{parentName:"ul"},"Create genesis wallets according to the allocation from the UCO token distribution ")),(0,r.kt)("h2",{id:"first-node-bootstrapping"},"First node bootstrapping"),(0,r.kt)("p",null,"During the first initialization, a node will contact P2P bootstrapping seeds (anchor nodes) to be able to fetch existing nodes."),(0,r.kt)("p",null,"Next a node will create transaction to publish its connectivity and crypto information which will authorize or not new joining node."),(0,r.kt)("p",null,"Once a node is authorized, after the success of this transaction, it can decrypt/load the storage nonce (will be used for self-repair) and start the self-repair initial cycle to sync transactions."),(0,r.kt)("h2",{id:"next-time-bootstraps"},"Next time bootstraps"),(0,r.kt)("p",null,"For further bootstraps, the bootstrap tasks determine if an update is required based on connectivity/crypto information changes, then a transaction is emitted to the node chain."),(0,r.kt)("p",null,"Once validated, the self-repair is also triggered to resync missed transactions."))}h.isMDXComponent=!0},11748:function(t,e,o){var n={"./locale":89234,"./locale.js":89234};function i(t){var e=r(t);return o(e)}function r(t){if(!o.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}i.keys=function(){return Object.keys(n)},i.resolve=r,t.exports=i,i.id=11748}}]);