"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9255],{4392:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=a(7462),i=(a(7294),a(3905));a(1839);const o={id:"transaction-validation",title:"Pending transaction validation"},r=void 0,c={unversionedId:"build/core/mining/transaction-validation",id:"build/core/mining/transaction-validation",title:"Pending transaction validation",description:"When a transaction is under validation a process is started to perform the ARCH consensus workflow.",source:"@site/docs/build/core/mining/pending-transaction-validation.md",sourceDirName:"build/core/mining",slug:"/build/core/mining/transaction-validation",permalink:"/archethic-docs/build/core/mining/transaction-validation",draft:!1,tags:[],version:"current",lastUpdatedAt:1663759384,formattedLastUpdatedAt:"Sep 21, 2022",frontMatter:{id:"transaction-validation",title:"Pending transaction validation"},sidebar:"docs",previous:{title:"Proof of Work algorithm",permalink:"/archethic-docs/build/core/mining/proof-of-work"},next:{title:"Transaction context retrieval",permalink:"/archethic-docs/build/core/mining/transaction-context"}},s={},l=[{value:"Smart contract verification",id:"smart-contract-verification",level:2},{value:"Transaction type verification",id:"transaction-type-verification",level:2},{value:"Node transaction verification",id:"node-transaction-verification",level:3},{value:"Node shared secrets transaction verification",id:"node-shared-secrets-transaction-verification",level:3},{value:"Token transaction verification",id:"token-transaction-verification",level:3},{value:"Oracle transaction verification",id:"oracle-transaction-verification",level:3},{value:"OracleSummary transaction verification",id:"oraclesummary-transaction-verification",level:3},{value:"Code proposal transaction verification",id:"code-proposal-transaction-verification",level:3},{value:"Code approval transaction verification",id:"code-approval-transaction-verification",level:3}],d={toc:l};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When a transaction is under validation a process is started to perform the ARCH consensus workflow."),(0,i.kt)("p",null,"At the beginning of this workflow, a prior validation is done to detect if the transaction is errornous according of several implementations based on the type of the transactions and other criterias."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Check of the previous signature"),(0,i.kt)("li",{parentName:"ol"},"Check if there is smart contract, of its validity"),(0,i.kt)("li",{parentName:"ol"},"Check the content size does not exceed the threshold defined in the configuration"),(0,i.kt)("li",{parentName:"ol"},"Provide verification based on the transaction type")),(0,i.kt)("h2",{id:"smart-contract-verification"},"Smart contract verification"),(0,i.kt)("p",null,"If a transaction contains smart contract, it needs to verify certains things to be sure the smart contract is valid and the nodes will be able to interpret the contract, for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parse the contract and determines its validity"),(0,i.kt)("li",{parentName:"ul"},"If an ownership and its secret have been encoded for the node shared storage nonce public key, so they will be able create new transaction on the chain")),(0,i.kt)("h2",{id:"transaction-type-verification"},"Transaction type verification"),(0,i.kt)("h3",{id:"node-transaction-verification"},"Node transaction verification"),(0,i.kt)("p",null,'Before to join the network, node must submit a transaction with a type "node".\nThe following checks are performed:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Decoding of the transaction's content"),(0,i.kt)("li",{parentName:"ul"},"Assert the origin key is authorized along with the certification. (See ",(0,i.kt)("a",{parentName:"li",href:"/learn/cryptography/hardware-root-of-trust"},"Hardware Root of Trust"),")"),(0,i.kt)("li",{parentName:"ul"},"Check if there are not already existing nodes with the same ip, port and public key")),(0,i.kt)("h3",{id:"node-shared-secrets-transaction-verification"},"Node shared secrets transaction verification"),(0,i.kt)("p",null,"Periodically the nodes submit a renewal of node shared secrets through a transaction.\nThe following checks are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Decoding of the transactio's content"),(0,i.kt)("li",{parentName:"ul"},"Check is the new authorized node proposed are available")),(0,i.kt)("h3",{id:"token-transaction-verification"},"Token transaction verification"),(0,i.kt)("p",null,'To create a new asset (Token), a transaction with a type "token" is submitted to the network.'),(0,i.kt)("p",null,"The nodes asserts the content of the Token transactions respects the formatting to be able for the node to interpret it and mint tokens."),(0,i.kt)("h3",{id:"oracle-transaction-verification"},"Oracle transaction verification"),(0,i.kt)("p",null,"When the OracleChain polled some external data and build a transaction to propose the new changes, the nodes will assert the content from the services data are correct regarding the service SLA. (See ",(0,i.kt)("a",{parentName:"p",href:"/build/core/oracle-chain/service"},"OracleChain Service"),")"),(0,i.kt)("h3",{id:"oraclesummary-transaction-verification"},"OracleSummary transaction verification"),(0,i.kt)("p",null,"Periodically, after a cycle/epoch, the nodes submit a transaction which summarizes the entire oracle chain data for this epoch.\nThen the nodes have to assert the changes through:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fetching the entire oracle chain for this epoch"),(0,i.kt)("li",{parentName:"ul"},"Assert the aggregated content in the oracle chain summary matches the data from all the transaction in the oracle chain ")),(0,i.kt)("h3",{id:"code-proposal-transaction-verification"},"Code proposal transaction verification"),(0,i.kt)("p",null,"When a new upgrade of the network is proposed, a transaction embeds the changes and is sent to the network. (See: On-Chain Governance "),(0,i.kt)("p",null,"The following checks are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Decoding the proposal changes (like Git patch)"),(0,i.kt)("li",{parentName:"ul"},"Assert the validity of the changes: format, conformity with the latest Git commit")),(0,i.kt)("h3",{id:"code-approval-transaction-verification"},"Code approval transaction verification"),(0,i.kt)("p",null,"When an updated have been proposed, technical commitee member can vote for a proposal, then a transaction is sent. (See: On-Chain Governance)"),(0,i.kt)("p",null,"The following checks are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Check if the approver is a member of the technical commitee,"),(0,i.kt)("li",{parentName:"ul"},"Check if the proposal exists"),(0,i.kt)("li",{parentName:"ul"},"Check if the proposal hasn't been signed by the approver earlier")))}h.isMDXComponent=!0}}]);